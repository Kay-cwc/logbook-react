[{"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\index.js":"1","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\serviceWorker.js":"2","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\App.js":"3","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Header.js":"4","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Routers\\Index.js":"5","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Helpers\\API.js":"6","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Register.js":"7","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\UserList.js":"8","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Log\\Index.js":"9","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Login.js":"10","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\TaskList.js":"11","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Profile.js":"12","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\TaskDetails.js":"13","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\CreateTask.js":"14","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\CreateLog.js":"15","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\SearchBar.js":"16","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Helpers\\TextEditor.js":"17"},{"size":634,"mtime":1603833946911,"results":"18","hashOfConfig":"19"},{"size":5086,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":485,"mtime":1607272333729,"results":"21","hashOfConfig":"19"},{"size":2668,"mtime":1607286458391,"results":"22","hashOfConfig":"19"},{"size":1035,"mtime":1606305092578,"results":"23","hashOfConfig":"19"},{"size":270,"mtime":1607276920966,"results":"24","hashOfConfig":"19"},{"size":3529,"mtime":1606770926890,"results":"25","hashOfConfig":"19"},{"size":2917,"mtime":1607272146146,"results":"26","hashOfConfig":"19"},{"size":2382,"mtime":1603286072952,"results":"27","hashOfConfig":"19"},{"size":2766,"mtime":1607273116822,"results":"28","hashOfConfig":"19"},{"size":4367,"mtime":1607284079223,"results":"29","hashOfConfig":"19"},{"size":5798,"mtime":1606239626137,"results":"30","hashOfConfig":"19"},{"size":9898,"mtime":1607287097118,"results":"31","hashOfConfig":"19"},{"size":7338,"mtime":1607284756481,"results":"32","hashOfConfig":"19"},{"size":4018,"mtime":1607272191396,"results":"33","hashOfConfig":"19"},{"size":2237,"mtime":1606073112348,"results":"34","hashOfConfig":"19"},{"size":2048,"mtime":1607288314746,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1eoay4j",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\index.js",[],["76","77"],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\serviceWorker.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\App.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Header.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Routers\\Index.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Helpers\\API.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Register.js",["78"],"import React, { Component } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport API from \"../../Helpers/API\";\r\nimport { toast } from 'react-semantic-toasts';\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: 'kaytonchiu@techture.com',\r\n      password1: 'workW37techture',\r\n      password2: 'workW37techture',\r\n      alias: 'kayton tt',\r\n    }\r\n  }\r\n\r\n  getToast = (msg, status) => {\r\n    toast({\r\n      title: msg,\r\n      type: status,\r\n      time: 5000,\r\n      icon: 'envelope',\r\n      size: 'mini',\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.password1 !== this.state.password2) {\r\n      this.getToast('The password does not match.', 'error')\r\n      return true\r\n    }\r\n    if ( this.state.password1.length < 8 || this.state.password2.length < 8 ) {\r\n      this.getToast('The password must contain at least 8 characters.', 'error')\r\n      return true\r\n    }\r\n    let data = {\r\n      email: this.state.email,\r\n      password1: this.state.password1,\r\n      password2: this.state.password2,\r\n      alias: this.state.alias,\r\n    }\r\n    API.post('/api/user/auth/registration', data)\r\n      .then(res => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(res)\r\n        }\r\n        this.getToast('User created.', 'success')\r\n        localStorage.setItem('LOGBOOK_AUTH_TOKEN', res.data.key)\r\n        this.props.history.push('/profile')\r\n      })\r\n      .catch(err => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(err.response.data)\r\n        }\r\n        for (const [key, value] of Object.entries(err.response.data)) {\r\n          this.getToast(value, 'error')\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"singleForm\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Field>\r\n            <label>Email</label>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.email}\r\n              onChange={(e) => this.setState({\r\n                email: e.target.value\r\n              })}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              value={this.state.password1}\r\n              onChange={(e) => this.setState({\r\n                password1: e.target.value\r\n              })}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              value={this.state.password2}\r\n              onChange={(e) => this.setState({\r\n                password2: e.target.value\r\n              })}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Alias</label>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.alias}\r\n              onChange={(e) => this.setState({\r\n                alias: e.target.value\r\n              })}\r\n            />\r\n          </Form.Field>\r\n          <div className=\"my_button_wrapper\">\r\n            <Button type=\"submit\">sign up</Button>\r\n          </div>\r\n        </Form>\r\n        <div className=\"my_button_wrapper\">\r\n          <Button className=\"my_button\" secondary onClick={() => this.props.history.push('/')}>log in with my account instead</Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Register;","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\UserList.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Log\\Index.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Login.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\TaskList.js",["79"],"import React, { Component } from 'react'\r\nimport { toast } from 'react-semantic-toasts';\r\nimport { Button, Container, Table, Modal} from 'semantic-ui-react';\r\nimport API from \"../../Helpers/API\";\r\nimport CreateTask from \"./CreateTask\";\r\n\r\nclass TaskContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subject: 'subject01',\r\n      description: 'description01',\r\n      modalToggle: false,\r\n      taskList: [],\r\n      role: 'ANONYMOYS'\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(this.state);\r\n    let data = {\r\n      subject: this.state.subject,\r\n      description: this.state.description,\r\n    }\r\n    let header = {\r\n      Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n    }\r\n    API.post('api/logs/tasks/', data, {headers: header})\r\n      .then(res => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(res)\r\n        }\r\n        toast({\r\n          title: res.data.data,\r\n          type: 'success',\r\n          time: 5000,\r\n          icon: 'envelope',\r\n          size: 'mini',\r\n        })\r\n        this.getTask()\r\n        this.setState({\r\n          createToggle: false\r\n        })\r\n      })\r\n      .catch(err => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getTask()\r\n    localStorage.removeItem('editorData')\r\n  }\r\n\r\n  getTask = () => {\r\n    let header = {\r\n      Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n    }\r\n    API.get('api/logs/tasks/', {headers: header})\r\n    .then( res => {\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(res)\r\n      }\r\n      this.setState({\r\n        taskList: res.data.data,\r\n        role: res.data.accessRight\r\n      })\r\n    })\r\n    .catch( err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  createTaskToggler = () => {\r\n    this.setState({\r\n      modalToggle: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let taskList = this.state.taskList.map( (list) => {\r\n      return (\r\n        <Table.Row >\r\n          <Table.Cell verticalAlign=\"middle\">{list.subject}</Table.Cell>\r\n          <Table.Cell id={list.created_by} verticalAlign=\"middle\">{list.created_by.alias}</Table.Cell>\r\n          <Table.Cell id={list.id} verticalAlign=\"middle\">\r\n            <Button\r\n              onClick={() => {\r\n                this.props.history.push(`/details?taskid=${list.id}`)\r\n              }}\r\n            >\r\n              View\r\n            </Button>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      )\r\n    }) \r\n\r\n    let taskForm = function() {\r\n      return (\r\n        <Modal\r\n          onOpen={this.createToggle(true)}\r\n        />\r\n      )\r\n    }\r\n    return (\r\n      <Container className=\"my_container\">\r\n        <div className=\"row\">\r\n          <div className='my_title_wrapper col align-self-start'>\r\n            <h1>My task</h1>\r\n          </div>\r\n          <div className=\"col align-self-end\">\r\n            <div className=\"my_button_wrapper my_button_right\">\r\n              { this.state.role === 'MANAGER' && \r\n                <Button\r\n                  className=\"my_button\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      modalToggle: !this.state.modalToggle\r\n                    })\r\n                  }}\r\n                >{ this.state.modalToggle ? 'cancel' : 'create task'}</Button>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Table inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell width={10}>task</Table.HeaderCell>\r\n              <Table.HeaderCell>created by</Table.HeaderCell>\r\n              <Table.HeaderCell></Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n              {taskList}\r\n          </Table.Body> \r\n        </Table> \r\n        <Modal \r\n          open={this.state.modalToggle}\r\n          size=\"fullscreen\"\r\n          className=\"my_modal\"\r\n        >       \r\n          <CreateTask \r\n            createTaskToggler={this.createTaskToggler} \r\n            getTask={this.getTask}\r\n          />\r\n        </Modal>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskContainer;","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\User\\Profile.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\TaskDetails.js",["80","81"],"import React, { Component } from 'react'\r\nimport { toast } from 'react-semantic-toasts';\r\nimport { Container, Modal, Label, Icon, Dropdown} from 'semantic-ui-react';\r\nimport API from \"../../Helpers/API\";\r\nimport CreateTask from \"./CreateTask\";\r\nimport CreateLog from \"./CreateLog\";\r\nimport { convertFromRaw, Editor, EditorState } from \"draft-js\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\n\r\nclass TaskDetailsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalToggle: false,\r\n      task: {\r\n        created_at: '',\r\n        created_by: 0,\r\n        created_by_alias: '',\r\n        description: '',\r\n        id: 0,\r\n        last_update: \"\",\r\n        status: \"\",\r\n        subject: \"\",\r\n        task_members: \"\",\r\n        task_members_obj: [],\r\n      },\r\n      taskId: 0,\r\n      taskMember: [0],\r\n      taskStatus: 'ON PROGRESS',\r\n      topToggle: true,\r\n      logToggle: false,\r\n      logType: 'CREATE',\r\n      logs: [],\r\n      role: 'EDITOR',\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let data = {\r\n      subject: this.state.subject,\r\n      description: this.state.description,\r\n    }\r\n    let header = {\r\n      Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n    }\r\n    API.post('api/logs/tasks/', data, {headers: header})\r\n      .then(res => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(res)\r\n        }\r\n        toast({\r\n          title: res.data.data,\r\n          type: 'success',\r\n          time: 5000,\r\n          icon: 'envelope',\r\n          size: 'mini',\r\n        })\r\n        const query = new URLSearchParams(this.props.history.location.search)\r\n        this.getTask(query.get('taskid'))\r\n        this.setState({\r\n          createToggle: false\r\n        })\r\n      })\r\n      .catch(err => {\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n          console.log(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  componentDidMount () {\r\n    const query = new URLSearchParams(this.props.history.location.search)\r\n    this.getTask(query.get('taskid'))\r\n    this.getLogs(query.get('taskid'))\r\n    this.setState({\r\n      taskid: query.get('taskid')\r\n    })\r\n  }\r\n\r\n  getLogs = (taskid) => {\r\n    let header = {\r\n      Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n    }\r\n    API.get(`api/logs/logs/?taskid=${taskid}`, {headers: header})\r\n    .then( res => {\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(res)\r\n      }\r\n      this.setState({\r\n        logs: res.data.data.reverse()\r\n      })\r\n    }\r\n  )\r\n    \r\n    .catch( err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  getTask = (taskid) => {\r\n    let header = {\r\n      Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n    }\r\n    API.get(`api/logs/tasks/${taskid}/`, {headers: header})\r\n    .then( res => {\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        console.log(res)\r\n      }\r\n      localStorage.setItem('editorData', res.data.description)\r\n      this.setState({\r\n        task: res.data,\r\n        taskMember: res.data.task_members_obj,\r\n        role: res.data.accessRight.toUpperCase()\r\n      })\r\n    })\r\n    .catch( err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  createTaskToggler = () => {\r\n    this.setState({\r\n      modalToggle: false\r\n    })\r\n  }\r\n\r\n  closeLogModal = () => {\r\n    this.setState({\r\n      logToggle: false\r\n    })\r\n  }\r\n\r\n  getToast = (msg, status) => {\r\n    toast({\r\n      title: msg,\r\n      type: status,\r\n      time: 5000,\r\n      icon: 'envelope',\r\n      size: 'mini',\r\n    })\r\n  }\r\n\r\n  getTaskStatus = () => {\r\n    let myStatus = ''\r\n    let taskClassName = ''\r\n    switch(this.state.task.status) {\r\n      case 'RE':\r\n        myStatus = 'UNDER REVIEW'\r\n        taskClassName = 'my_status'\r\n        break\r\n      case 'FU':\r\n        myStatus = 'FOLLOW UP'\r\n        taskClassName = 'my_status my_status_alert'\r\n        break\r\n      case 'CP':\r\n        myStatus = 'COMPLETED'\r\n        taskClassName = 'my_status my_status_success'\r\n        break\r\n      default:\r\n        myStatus = 'ON PROGRESS'\r\n        taskClassName = 'my_status'\r\n    }\r\n    return (\r\n      <span className={taskClassName}>{myStatus}</span>\r\n    ) \r\n  }\r\n\r\n  descriptionHandler = () => {\r\n    var content = ''\r\n    if (this.state.task.description.length > 0) {\r\n      var rawContent = JSON.parse(this.state.task.description)\r\n      var contentState = convertFromRaw(rawContent);\r\n      var editorState = EditorState.createWithContent(contentState)\r\n      content = stateToHTML(editorState.getCurrentContent())      \r\n    }\r\n    console.log(content)\r\n    return content\r\n  }\r\n\r\n  MyLogs = () => {\r\n      const myLog = this.state.logs.map( (log) => {\r\n      return (\r\n        <div className=\"my_comment\">\r\n          <div><h3 className=\"my_subject\">{log.subject}</h3></div>\r\n          <div className=\"my_comment_meta\">\r\n          \r\n            <Icon name=\"user\" />\r\n            {log.created_by.alias} &nbsp;&nbsp;\r\n            <Icon name=\"clock\" />\r\n            {log.created_at.split('T')[0]} &nbsp;\r\n            {log.created_at.split('T')[1].split('.')[0]} &nbsp;&nbsp;\r\n            <span\r\n              style={{cursor: \"pointer\"}}\r\n              data-logId={log.id}\r\n              onClick={(e) => {\r\n                this.setState({\r\n                  logToggle: true,\r\n                  logType: 'EDIT',\r\n                  logId: e.target.getAttribute('data-logId')\r\n                })\r\n              }}\r\n            >\r\n              <Icon id={log.id} name=\"edit\" />\r\n              {'edit'} \r\n            </span>\r\n          </div>\r\n          <div>{log.detail}</div>\r\n        </div>\r\n      )\r\n    })\r\n    return myLog\r\n  }\r\n\r\n  render() {\r\n    const query = new URLSearchParams(this.props.history.location.search)\r\n    let Collaborator = this.state.taskMember.map( (user) => {\r\n      return (\r\n        <Label key={user.id}>\r\n          {user.alias}\r\n        </Label>\r\n      )\r\n    })\r\n    return (\r\n      <Container className=\"my_container\">\r\n\r\n        <div className='row'>\r\n          <div className=\"col-8\">\r\n            <h3 className=\"my_subject\" >\r\n              {this.state.task.subject}\r\n              {this.getTaskStatus()}\r\n            </h3>\r\n          </div>\r\n          <div className=\"col-4 my_button_wrapper my_button_right\">\r\n          <div className=\"my_button_wrapper my_button_right\">\r\n            <Dropdown className=\"my_button\" text=\"action\">\r\n              <Dropdown.Menu direction=\"left\">\r\n                <Dropdown.Item\r\n                  icon=\"add circle\"\r\n                  text=\"add log\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      logToggle: true,\r\n                      logType: 'CREATE'\r\n                    })\r\n                  }}\r\n                />\r\n                {\r\n                  this.state.role === 'MANAGER' &&\r\n                  <Dropdown.Item\r\n                    icon=\"edit\"\r\n                    className=\"my_button\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        modalToggle: !this.state.modalToggle\r\n                      })\r\n                    }}\r\n                    text={ this.state.modalToggle ? 'cancel' : 'edit task'}\r\n                  />\r\n                }\r\n                <Dropdown.Item\r\n                  icon={\r\n                    this.state.topToggle ?\r\n                    \"arrow alternate circle up\" :\r\n                    \"arrow alternate circle down\"\r\n                  }\r\n                  text=\"collapse\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      topToggle: !this.state.topToggle\r\n                    })\r\n                  }}\r\n                />\r\n                <Dropdown.Item\r\n                  icon=\"arrow alternate circle left\"\r\n                  className=\"my_button\"\r\n                  onClick={() => this.props.history.push('/task')}\r\n                  text=\"return\"\r\n                />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        { \r\n          this.state.topToggle &&\r\n          <div>\r\n            <div dangerouslySetInnerHTML={{__html: this.descriptionHandler()}}></div>\r\n            <div className=\"my_details\"><i>task owner:</i> {this.state.task.created_by.alias}</div>\r\n            <div className=\"my_details\"><i>task members</i></div>\r\n            { Collaborator }\r\n\r\n\r\n            <div className=\"my_button_wrapper my_button_group_wrapper my_button_right\">\r\n            </div>\r\n          </div>\r\n        }\r\n        <hr />\r\n\r\n        <Modal \r\n          open={this.state.modalToggle}\r\n          size=\"fullscreen\"\r\n          className=\"my_modal\"\r\n        >       \r\n          <CreateTask \r\n            createTaskToggler={this.createTaskToggler} \r\n            editToggle={true}\r\n            taskid={this.state.taskid}\r\n            getTask={this.getTask}\r\n            getToast={this.getToast}\r\n            taskStatus={this.state.task.status}\r\n          />\r\n        </Modal>\r\n        <Modal\r\n          open={this.state.logToggle}\r\n          size=\"fullscreen\"\r\n          className=\"my_modal\"\r\n        >\r\n          <CreateLog \r\n            closeLogModal={this.closeLogModal}\r\n            logType={this.state.logType}\r\n            taskid={this.state.taskid}\r\n            getToast={this.getToast}\r\n            getLogs={this.getLogs}\r\n            logId={this.state.logId}\r\n            logData={this.state.logs.filter(log => log.id === this.state.logId)}\r\n          />\r\n        </Modal>\r\n\r\n        <Container>\r\n\r\n\r\n          <div className=\"my_comment_wrapper\">\r\n            {this.MyLogs()}\r\n          </div>\r\n        </Container>\r\n\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskDetailsContainer;","C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\CreateTask.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\CreateLog.js",[],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Components\\Task\\SearchBar.js",["82"],"import React from 'react'\r\nimport { Grid, Search } from 'semantic-ui-react'\r\nimport API from \"../../Helpers/API\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  results: [],\r\n  value: '',\r\n}\r\n\r\nconst header = {\r\n  Authorization: 'TOKEN ' + localStorage.getItem('LOGBOOK_AUTH_TOKEN')\r\n}\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CLEAN_QUERY':\r\n      return initialState\r\n    case 'START_SEARCH':\r\n      return { ...state, loading: true, value: action.query }\r\n    case 'FINISH_SEARCH':\r\n      return { ...state, loading: false, results: action.results }\r\n    case 'UPDATE_SELECTION':\r\n      return { ...state, value: action.selection }\r\n\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nconst SearchBar = (props) => {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\r\n  const { loading, results, value } = state\r\n\r\n  const timeoutRef = React.useRef()\r\n  const handleSearchChange = React.useCallback((e, data) => {\r\n    clearTimeout(timeoutRef.current)\r\n    dispatch({ type: 'START_SEARCH', query: data.value })\r\n\r\n    timeoutRef.current = setTimeout(() => {\r\n      if (data.value.length === 0) {\r\n        dispatch({ type: 'CLEAN_QUERY' })\r\n        return\r\n      }\r\n      API.get('api/user/search/?field=' + data.value, { headers: header })\r\n      .then( res => {\r\n        let results = res.data.data\r\n        results.forEach( item => {\r\n          item.title = item.alias\r\n          item.description = item.email\r\n        });\r\n        dispatch({ type: 'FINISH_SEARCH', results: results })\r\n      })\r\n      .catch( err => {\r\n        console.log(err.response)\r\n      })\r\n    }, 1000)\r\n  }, [])\r\n\r\n  const handleSelection = React.useCallback((e, data) => {\r\n    props.selectUser(data.result)\r\n    dispatch({ type: 'CLEAN_QUERY'})\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeoutRef.current)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={6}>\r\n        <Search\r\n          loading={loading}\r\n          onResultSelect={handleSelection}\r\n          onSearchChange={handleSearchChange}\r\n          results={results}\r\n          value={value}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default SearchBar\r\n",["83","84"],"C:\\Users\\kayto\\project\\opsApp\\react-frontend\\src\\Helpers\\TextEditor.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":56,"column":21,"nodeType":"91","messageId":"92","endLine":56,"endColumn":24},{"ruleId":"89","severity":1,"message":"93","line":102,"column":9,"nodeType":"91","messageId":"92","endLine":102,"endColumn":17},{"ruleId":"89","severity":1,"message":"94","line":7,"column":26,"nodeType":"91","messageId":"92","endLine":7,"endColumn":32},{"ruleId":"89","severity":1,"message":"95","line":216,"column":11,"nodeType":"91","messageId":"92","endLine":216,"endColumn":16},{"ruleId":"96","severity":1,"message":"97","line":60,"column":27,"nodeType":"98","endLine":60,"endColumn":44},{"ruleId":"85","replacedBy":"99"},{"ruleId":"87","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'taskForm' is assigned a value but never used.","'Editor' is defined but never used.","'query' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression",["101"],["102"],"no-global-assign","no-unsafe-negation"]